(function () {
    /**
     * QRCode for JavaScript
     *
     * Copyright (c) 2009 Kazuhiko Arase
     *
     * URL: http://www.d-project.com/
     *
     * Licensed under the MIT license:
     *   http://www.opensource.org/licenses/mit-license.php
     *
     * The word "QR Code" is registered trademark of
     * DENSO WAVE INCORPORATED
     *   http://www.denso-wave.com/qrcode/faqpatent-e.html
     *
     */
    var qrcode = function () {
        var t = function (t, e) {
            this._el = t, this._htOption = e
        };
        t.prototype.makeCode = function (t) {
            this._el.innerHTML = "", new s(this._el, this._htOption).makeCode(t)
        };
        var e = {
                MODE_NUMBER: 1,
                MODE_ALPHA_NUM: 2,
                MODE_8BIT_BYTE: 4,
                MODE_KANJI: 8
            },
            r = {
                L: 1,
                M: 0,
                Q: 3,
                H: 2
            },
            n = {
                PATTERN000: 0,
                PATTERN001: 1,
                PATTERN010: 2,
                PATTERN011: 3,
                PATTERN100: 4,
                PATTERN101: 5,
                PATTERN110: 6,
                PATTERN111: 7
            },
            o = function () {
                var t = [
                        [],
                        [6, 18],
                        [6, 22],
                        [6, 26],
                        [6, 30],
                        [6, 34],
                        [6, 22, 38],
                        [6, 24, 42],
                        [6, 26, 46],
                        [6, 28, 50],
                        [6, 30, 54],
                        [6, 32, 58],
                        [6, 34, 62],
                        [6, 26, 46, 66],
                        [6, 26, 48, 70],
                        [6, 26, 50, 74],
                        [6, 30, 54, 78],
                        [6, 30, 56, 82],
                        [6, 30, 58, 86],
                        [6, 34, 62, 90],
                        [6, 28, 50, 72, 94],
                        [6, 26, 50, 74, 98],
                        [6, 30, 54, 78, 102],
                        [6, 28, 54, 80, 106],
                        [6, 30, 58, 86, 110],
                        [6, 34, 62, 90, 114],
                        [6, 26, 50, 74, 98, 122],
                        [6, 30, 54, 78, 102, 126],
                        [6, 26, 52, 78, 104, 130],
                        [6, 30, 56, 82, 108, 134],
                        [6, 34, 60, 86, 112, 138],
                        [6, 30, 58, 86, 114, 142],
                        [6, 34, 62, 90, 118, 146],
                        [6, 30, 54, 78, 102, 126, 150],
                        [6, 24, 50, 76, 102, 128, 154],
                        [6, 28, 54, 80, 106, 132, 158],
                        [6, 32, 58, 84, 110, 136, 162],
                        [6, 26, 54, 82, 110, 138, 166],
                        [6, 30, 58, 86, 114, 142, 170]
                    ],
                    e = 1335,
                    r = 7973,
                    o = 21522,
                    i = {},
                    a = function (t) {
                        for (var e = 0; 0 != t;) e++, t >>>= 1;
                        return e
                    };
                return i.getBCHTypeInfo = function (t) {
                    for (var n = t << 10; a(n) - a(e) >= 0;) n ^= e << a(n) - a(e);
                    return (t << 10 | n) ^ o
                }, i.getBCHTypeNumber = function (t) {
                    for (var n = t << 12; a(n) - a(r) >= 0;) n ^= r << a(n) - a(r);
                    return t << 12 | n
                }, i.getPatternPosition = function (e) {
                    return t[e - 1]
                }, i.getMaskFunction = function (t) {
                    switch (t) {
                        case n.PATTERN000:
                            return function (t, e) {
                                return (t + e) % 2 == 0
                            };
                        case n.PATTERN001:
                            return function (t, e) {
                                return t % 2 == 0
                            };
                        case n.PATTERN010:
                            return function (t, e) {
                                return e % 3 == 0
                            };
                        case n.PATTERN011:
                            return function (t, e) {
                                return (t + e) % 3 == 0
                            };
                        case n.PATTERN100:
                            return function (t, e) {
                                return (Math.floor(t / 2) + Math.floor(e / 3)) % 2 == 0
                            };
                        case n.PATTERN101:
                            return function (t, e) {
                                return t * e % 2 + t * e % 3 == 0
                            };
                        case n.PATTERN110:
                            return function (t, e) {
                                return (t * e % 2 + t * e % 3) % 2 == 0
                            };
                        case n.PATTERN111:
                            return function (t, e) {
                                return (t * e % 3 + (t + e) % 2) % 2 == 0
                            };
                        default:
                            throw new Error("bad maskPattern:" + t)
                    }
                }, i.getErrorCorrectPolynomial = function (t) {
                    for (var e = new u([1], 0), r = 0; r < t; r++) e = e.multiply(new u([1, l.gexp(r)], 0));
                    return e
                }, i.getLengthInBits = function (t, r) {
                    if (r >= 1 && r < 10) switch (t) {
                        case e.MODE_NUMBER:
                            return 10;
                        case e.MODE_ALPHA_NUM:
                            return 9;
                        case e.MODE_8BIT_BYTE:
                            return 8;
                        case e.MODE_KANJI:
                            return 8;
                        default:
                            throw new Error("mode:" + t)
                    } else if (r < 27) switch (t) {
                        case e.MODE_NUMBER:
                            return 12;
                        case e.MODE_ALPHA_NUM:
                            return 11;
                        case e.MODE_8BIT_BYTE:
                            return 16;
                        case e.MODE_KANJI:
                            return 10;
                        default:
                            throw new Error("mode:" + t)
                    } else {
                        if (!(r < 41)) throw new Error("type:" + r);
                        switch (t) {
                            case e.MODE_NUMBER:
                                return 14;
                            case e.MODE_ALPHA_NUM:
                                return 13;
                            case e.MODE_8BIT_BYTE:
                                return 16;
                            case e.MODE_KANJI:
                                return 12;
                            default:
                                throw new Error("mode:" + t)
                        }
                    }
                }, i.getLostPoint = function (t) {
                    for (var e = t.getModuleCount(), r = 0, n = 0; n < e; n++)
                        for (var o = 0; o < e; o++) {
                            for (var i = 0, a = t.isDark(n, o), s = -1; s <= 1; s++)
                                if (n + s >= 0 && n + s < e)
                                    for (var l = -1; l <= 1; l++) o + l >= 0 && o + l < e && (0 != s || 0 != l) && a == t.isDark(n + s, o + l) && i++;
                            i > 5 && (r += 3 + i - 5)
                        }
                    for (n = 0; n < e - 1; n++)
                        for (o = 0; o < e - 1; o++) {
                            var u = 0;
                            t.isDark(n, o) && u++, t.isDark(n + 1, o) && u++, t.isDark(n, o + 1) && u++, t.isDark(n + 1, o + 1) && u++, (0 == u || 4 == u) && (r += 3)
                        }
                    for (n = 0; n < e; n++)
                        for (o = 0; o < e - 6; o++) t.isDark(n, o) && !t.isDark(n, o + 1) && t.isDark(n, o + 2) && t.isDark(n, o + 3) && t.isDark(n, o + 4) && !t.isDark(n, o + 5) && t.isDark(n, o + 6) && (r += 40);
                    for (o = 0; o < e; o++)
                        for (n = 0; n < e - 6; n++) t.isDark(n, o) && !t.isDark(n + 1, o) && t.isDark(n + 2, o) && t.isDark(n + 3, o) && t.isDark(n + 4, o) && !t.isDark(n + 5, o) && t.isDark(n + 6, o) && (r += 40);
                    for (var c = 0, o = 0; o < e; o++)
                        for (n = 0; n < e; n++) t.isDark(n, o) && c++;
                    return r += 10 * (Math.abs(100 * c / e / e - 50) / 5)
                }, i
            }(),
            i = function () {
                for (var t = new Array(256), e = new Array(256), r = 0; r < 8; r++) t[r] = 1 << r;
                for (r = 8; r < 256; r++) t[r] = t[r - 4] ^ t[r - 5] ^ t[r - 6] ^ t[r - 8];
                for (r = 0; r < 255; r++) e[t[r]] = r;
                var n = {};
                return n.glog = function (t) {
                    if (t < 1) throw new Error("glog(" + t + ")");
                    return e[t]
                }, n.gexp = function (e) {
                    for (; e < 0;) e += 255;
                    for (; e >= 256;) e -= 255;
                    return t[e]
                }, n
            }(),
            l = i,
            a = [
                [1, 26, 19],
                [1, 26, 16],
                [1, 26, 13],
                [1, 26, 9],
                [1, 44, 34],
                [1, 44, 28],
                [1, 44, 22],
                [1, 44, 16],
                [1, 70, 55],
                [1, 70, 44],
                [2, 35, 17],
                [2, 35, 13],
                [1, 100, 80],
                [2, 50, 32],
                [2, 50, 24],
                [4, 25, 9],
                [1, 134, 108],
                [2, 67, 43],
                [2, 33, 15, 2, 34, 16],
                [2, 33, 11, 2, 34, 12],
                [2, 86, 68],
                [4, 43, 27],
                [4, 43, 19],
                [4, 43, 15],
                [2, 98, 78],
                [4, 49, 31],
                [2, 32, 14, 4, 33, 15],
                [4, 39, 13, 1, 40, 14],
                [2, 121, 97],
                [2, 60, 38, 2, 61, 39],
                [4, 40, 18, 2, 41, 19],
                [4, 40, 14, 2, 41, 15],
                [2, 146, 116],
                [3, 58, 36, 2, 59, 37],
                [4, 36, 16, 4, 37, 17],
                [4, 36, 12, 4, 37, 13],
                [2, 86, 68, 2, 87, 69],
                [4, 69, 43, 1, 70, 44],
                [6, 43, 19, 2, 44, 20],
                [6, 43, 15, 2, 44, 16],
                [4, 101, 81],
                [1, 80, 50, 4, 81, 51],
                [4, 50, 22, 4, 51, 23],
                [3, 36, 12, 8, 37, 13],
                [2, 116, 92, 2, 117, 93],
                [6, 58, 36, 2, 59, 37],
                [4, 46, 20, 6, 47, 21],
                [7, 42, 14, 4, 43, 15],
                [4, 136, 108],
                [8, 68, 42],
                [5, 43, 19, 1, 44, 20],
                [1, 50, 16, 12, 51, 17],
                [2, 152, 122],
                [3, 76, 48, 4, 77, 49],
                [4, 54, 24, 7, 55, 25],
                [12, 45, 15, 4, 46, 16],
                [2, 172, 138],
                [10, 86, 54],
                [6, 54, 24, 6, 55, 25],
                [4, 54, 16, 14, 55, 17],
                [4, 196, 156],
                [1, 98, 62, 6, 99, 63],
                [8, 58, 26, 4, 59, 27],
                [12, 45, 15, 8, 46, 16],
                [2, 224, 178],
                [4, 112, 70, 4, 113, 71],
                [3, 55, 21, 10, 56, 22],
                [3, 45, 15, 16, 46, 16],
                [4, 252, 202],
                [4, 126, 80, 4, 127, 81],
                [17, 58, 22],
                [6, 45, 15, 16, 46, 16],
                [6, 280, 224],
                [6, 140, 88, 2, 141, 89],
                [17, 53, 21],
                [4, 45, 15, 23, 46, 16],
                [4, 308, 246],
                [13, 123, 77],
                [4, 58, 22, 13, 59, 23],
                [17, 45, 15, 3, 46, 16],
                [5, 336, 268],
                [4, 168, 106, 4, 169, 107],
                [1, 62, 24, 20, 63, 25],
                [19, 47, 15, 6, 48, 16],
                [6, 364, 290],
                [6, 145, 91, 4, 146, 92],
                [1, 62, 24, 22, 63, 25],
                [2, 45, 15, 26, 46, 16],
                [8, 420, 336],
                [8, 168, 106, 4, 169, 107],
                [20, 62, 24, 4, 63, 25],
                [20, 47, 15, 7, 48, 16],
                [8, 448, 358],
                [10, 156, 98, 4, 157, 99],
                [19, 60, 24, 6, 61, 25],
                [16, 45, 15, 14, 46, 16],
                [10, 504, 402],
                [12, 168, 106, 4, 169, 107],
                [8, 56, 22, 16, 57, 23],
                [29, 45, 15, 3, 46, 16],
                [12, 560, 448],
                [12, 186, 116, 4, 187, 117],
                [12, 55, 21, 16, 56, 22],
                [29, 45, 15, 6, 46, 16],
                [14, 616, 492],
                [12, 205, 129, 4, 206, 130],
                [13, 58, 22, 16, 59, 23],
                [29, 46, 16, 6, 47, 17],
                [16, 672, 536],
                [17, 224, 140],
                [13, 58, 22, 18, 59, 23],
                [2, 45, 15, 34, 46, 16],
                [18, 728, 582],
                [14, 242, 152, 4, 243, 153],
                [2, 62, 24, 32, 63, 25],
                [20, 47, 15, 18, 48, 16],
                [20, 784, 626],
                [18, 261, 163, 4, 262, 164],
                [4, 62, 24, 31, 63, 25],
                [11, 46, 16, 31, 47, 17],
                [24, 868, 694],
                [16, 290, 180, 2, 291, 181],
                [19, 62, 24, 19, 63, 25],
                [11, 46, 16, 34, 47, 17],
                [26, 924, 740],
                [30, 308, 192],
                [3, 62, 24, 35, 63, 25],
                [11, 46, 16, 37, 47, 17],
                [30, 1008, 806],
                [8, 336, 210, 4, 337, 211],
                [3, 62, 24, 40, 63, 25],
                [5, 47, 17, 43, 48, 18],
                [32, 1092, 874],
                [8, 364, 228, 4, 365, 229],
                [42, 62, 24, 1, 63, 25],
                [23, 47, 17, 26, 48, 18],
                [36, 1176, 940],
                [10, 392, 244, 4, 393, 245],
                [4, 62, 24, 46, 63, 25],
                [29, 47, 17, 23, 48, 18],
                [40, 1260, 1008],
                [6, 420, 262, 4, 421, 263],
                [43, 62, 24, 1, 63, 25],
                [29, 47, 17, 28, 48, 18],
                [44, 1344, 1074],
                [8, 448, 280, 4, 449, 281],
                [22, 62, 24, 28, 63, 25],
                [8, 47, 17, 49, 48, 18],
                [48, 1428, 1142],
                [10, 476, 298, 4, 477, 299],
                [26, 62, 24, 28, 63, 25],
                [6, 47, 17, 53, 48, 18],
                [52, 1512, 1210],
                [12, 504, 316, 4, 505, 317],
                [26, 62, 24, 32, 63, 25],
                [12, 47, 17, 51, 48, 18],
                [58, 1624, 1298],
                [18, 541, 338, 4, 542, 339],
                [32, 62, 24, 32, 63, 25],
                [14, 47, 17, 56, 48, 18],
                [60, 1710, 1368],
                [18, 570, 356, 5, 571, 357],
                [34, 62, 24, 34, 63, 25],
                [14, 47, 17, 58, 48, 18]
            ],
            s = function (t, e) {
                this._el = t, this._htOption = e
            };
        s.prototype.makeCode = function (t) {
            for (var e = new c(this._htOption.typeNumber, this._htOption.correctLevel), n = 0, o = (e.addData(t), e.make(), this._el.childNodes.length), i = 0; i < o; i++) this._el.removeChild(this._el.childNodes[0]);
            if (n < e.getModuleCount()) {
                var a = document.createElement("table");
                a.style.width = "100%", a.style.height = "100%", a.style.border = "0", a.style.borderCollapse = "collapse", a.style.backgroundColor = this._htOption.colorLight;
                for (var s = 0; s < e.getModuleCount(); s++) {
                    var l = document.createElement("tr");
                    l.style.height = "100%";
                    for (var u = 0; u < e.getModuleCount(); u++) {
                        var h = document.createElement("td");
                        h.style.width = "100%", h.style.backgroundColor = e.isDark(s, u) ? this._htOption.colorDark : this._htOption.colorLight, l.appendChild(h)
                    }
                    a.appendChild(l)
                }
                this._el.appendChild(a)
            }
        };
        var u = function (t, e) {
            if (void 0 == t.length) throw new Error(t.length + "/" + e);
            for (var r = 0; r < t.length && 0 == t[r];) r++;
            this.num = new Array(t.length - r + e);
            for (var n = 0; n < t.length - r; n++) this.num[n] = t[n + r]
        };
        u.prototype.get = function (t) {
            return this.num[t]
        }, u.prototype.getLength = function () {
            return this.num.length
        }, u.prototype.multiply = function (t) {
            for (var e = new Array(this.getLength() + t.getLength() - 1), r = 0; r < this.getLength(); r++)
                for (var n = 0; n < t.getLength(); n++) e[r + n] ^= l.gexp(l.glog(this.get(r)) + l.glog(t.get(n)));
            return new u(e, 0)
        }, u.prototype.mod = function (t) {
            if (this.getLength() - t.getLength() < 0) return this;
            for (var e = l.glog(this.get(0)) - l.glog(t.get(0)), r = new Array(this.getLength()), n = 0; n < this.getLength(); n++) r[n] = this.get(n);
            for (n = 0; n < t.getLength(); n++) r[n] ^= l.gexp(l.glog(t.get(n)) + e);
            return new u(r, 0).mod(t)
        };
        var c = function (t, e) {
            this._typeNumber = t, this._errorCorrectLevel = e, this._modules = null, this._moduleCount = 0, this._dataCache = null, this._dataList = []
        };
        c.prototype.addData = function (t) {
            var r = new function (t) {
                this._mode = e.MODE_8BIT_BYTE, this._data = t
            }(t);
            this._dataList.push(r), this._dataCache = null
        }, c.prototype.isDark = function (t, e) {
            if (t < 0 || this._moduleCount <= t || e < 0 || this._moduleCount <= e) throw new Error(t + "," + e);
            return this._modules[t][e]
        }, c.prototype.getModuleCount = function () {
            return this._moduleCount
        }, c.prototype.make = function () {
            this.makeImpl(!1, this.getBestMaskPattern())
        }, c.prototype.makeImpl = function (t, e) {
            this._moduleCount = 4 * this._typeNumber + 17, this._modules = new Array(this._moduleCount);
            for (var r = 0; r < this._moduleCount; r++) {
                this._modules[r] = new Array(this._moduleCount);
                for (var n = 0; n < this._moduleCount; n++) this._modules[r][n] = null
            }
            this.setupPositionProbePattern(0, 0), this.setupPositionProbePattern(this._moduleCount - 7, 0), this.setupPositionProbePattern(0, this._moduleCount - 7), this.setupPositionAdjustPattern(), this.setupTimingPattern(), this.setupTypeInfo(t, e), this._typeNumber >= 7 && this.setupTypeNumber(t), null == this._dataCache && (this._dataCache = c.createData(this._typeNumber, this._errorCorrectLevel, this._dataList)), this.mapData(this._dataCache, e)
        }, c.prototype.setupPositionProbePattern = function (t, e) {
            for (var r = -1; r <= 7; r++)
                if (!(t + r <= -1 || this._moduleCount <= t + r))
                    for (var n = -1; n <= 7; n++) e + n <= -1 || this._moduleCount <= e + n || (r >= 0 && r <= 6 && (0 == n || 6 == n) || n >= 0 && n <= 6 && (0 == r || 6 == r) || r >= 2 && r <= 4 && n >= 2 && n <= 4 ? this._modules[t + r][e + n] = !0 : this._modules[t + r][e + n] = !1)
        }, c.prototype.getBestMaskPattern = function () {
            for (var t = 0, e = 0, r = 0; r < 8; r++) {
                this.makeImpl(!0, r);
                var n = o.getLostPoint(this);
                (0 == r || t > n) && (t = n, e = r)
            }
            return e
        }, c.prototype.setupTimingPattern = function () {
            for (var t = 8; t < this._moduleCount - 8; t++) null == this._modules[t][6] && (this._modules[t][6] = t % 2 == 0);
            for (var e = 8; e < this._moduleCount - 8; e++) null == this._modules[6][e] && (this._modules[6][e] = e % 2 == 0)
        }, c.prototype.setupPositionAdjustPattern = function () {
            for (var t = o.getPatternPosition(this._typeNumber), e = 0; e < t.length; e++)
                for (var r = 0; r < t.length; r++) {
                    var n = t[e],
                        i = t[r];
                    if (null == this._modules[n][i])
                        for (var a = -2; a <= 2; a++)
                            for (var s = -2; s <= 2; s++) - 2 == a || 2 == a || -2 == s || 2 == s || 0 == a && 0 == s ? this._modules[n + a][i + s] = !0 : this._modules[n + a][i + s] = !1
                }
        }, c.prototype.setupTypeNumber = function (t) {
            for (var e = o.getBCHTypeNumber(this._typeNumber), r = 0; r < 18; r++) {
                var n = !t && 1 == (e >> r & 1);
                this._modules[Math.floor(r / 3)][r % 3 + this._moduleCount - 8 - 3] = n
            }
            for (r = 0; r < 18; r++) {
                n = !t && 1 == (e >> r & 1);
                this._modules[r % 3 + this._moduleCount - 8 - 3][Math.floor(r / 3)] = n
            }
        }, c.prototype.setupTypeInfo = function (t, e) {
            for (var r = this._errorCorrectLevel << 3 | e, n = o.getBCHTypeInfo(r), i = 0; i < 15; i++) {
                var a = !t && 1 == (n >> i & 1);
                i < 6 ? this._modules[i][8] = a : i < 8 ? this._modules[i + 1][8] = a : this._modules[this._moduleCount - 15 + i][8] = a
            }
            for (i = 0; i < 15; i++) {
                a = !t && 1 == (n >> i & 1);
                i < 8 ? this._modules[8][this._moduleCount - i - 1] = a : i < 9 ? this._modules[8][15 - i - 1 + 1] = a : this._modules[8][15 - i - 1] = a
            }
            this._modules[this._moduleCount - 8][8] = !t
        }, c.prototype.mapData = function (t, e) {
            for (var r = -1, n = this._moduleCount - 1, i = 7, a = 0, s = this._moduleCount - 1; s > 0; s -= 2)
                for (6 == s && s--;;) {
                    for (var l = 0; l < 2; l++)
                        if (null == this._modules[n][s - l]) {
                            var u = !1;
                            a < t.length && (u = 1 == (t[a] >>> i & 1));
                            var c = o.getMaskFunction(e);
                            c(n, s - l) && (u = !u), this._modules[n][s - l] = u, -1 == --i && (a++, i = 7)
                        } if ((n += r) < 0 || this._moduleCount <= n) {
                        n -= r, r = -r;
                        break
                    }
                }
        }, c.createData = function (t, e, r) {
            for (var n = h.getRSBlocks(t, e), i = new d, s = 0; s < r.length; s++) {
                var l = r[s];
                i.put(l.getMode(), 4), i.put(l.getLength(), o.getLengthInBits(l.getMode(), t)), l.write(i)
            }
            for (var u = 0, s = 0; s < n.length; s++) u += n[s].dataCount;
            if (i.getLengthInBits() > 8 * u) throw new Error("code length overflow. (" + i.getLengthInBits() + ">" + 8 * u + ")");
            for (i.getLengthInBits() + 4 <= 8 * u && i.put(0, 4); i.getLengthInBits() % 8 != 0;) i.putBit(!1);
            for (;;) {
                if (i.getLengthInBits() >= 8 * u) break;
                if (i.put(236, 8), i.getLengthInBits() >= 8 * u) break;
                i.put(17, 8)
            }
            return c.createBytes(i, n)
        }, c.createBytes = function (t, e) {
            for (var r = 0, n = 0, i = 0, a = new Array(e.length), s = new Array(e.length), c = 0; c < e.length; c++) {
                var h = e[c].dataCount,
                    d = e[c].totalCount - h;
                n = Math.max(n, h), i = Math.max(i, d), a[c] = new Array(h);
                for (var g = 0; g < a[c].length; g++) a[c][g] = 255 & t.getBuffer()[g + r];
                r += h;
                var f = o.getErrorCorrectPolynomial(d),
                    p = new u(a[c], f.getLength() - 1).mod(f);
                s[c] = new Array(f.getLength() - 1);
                for (g = 0; g < s[c].length; g++) {
                    var _ = g + p.getLength() - s[c].length - 1;
                    s[c][g] = _ >= 0 ? p.get(_) : 0
                }
            }
            for (var m = 0, g = 0; g < e.length; g++) m += e[g].totalCount;
            for (var v = new Array(m), w = 0, g = 0; g < n; g++)
                for (c = 0; c < e.length; c++) g < a[c].length && (v[w++] = a[c][g]);
            for (g = 0; g < i; g++)
                for (c = 0; c < e.length; c++) g < s[c].length && (v[w++] = s[c][g]);
            return v
        };
        var h = function () {
            var t = [
                    [1, 26, 19],
                    [1, 26, 16],
                    [1, 26, 13],
                    [1, 26, 9],
                    [1, 44, 34],
                    [1, 44, 28],
                    [1, 44, 22],
                    [1, 44, 16],
                    [1, 70, 55],
                    [1, 70, 44],
                    [1, 70, 34],
                    [1, 70, 26],
                    [1, 100, 80],
                    [2, 50, 32],
                    [2, 50, 24],
                    [2, 50, 18],
                    [1, 134, 108],
                    [2, 67, 43],
                    [2, 33, 15, 2, 34, 16],
                    [2, 33, 11, 2, 34, 12],
                    [2, 86, 68],
                    [4, 43, 27],
                    [4, 43, 19],
                    [4, 43, 15],
                    [2, 98, 78],
                    [4, 49, 31],
                    [2, 32, 14, 4, 33, 15],
                    [4, 39, 13, 1, 40, 14],
                    [2, 121, 97],
                    [2, 60, 38, 2, 61, 39],
                    [4, 40, 18, 2, 41, 19],
                    [4, 40, 14, 2, 41, 15],
                    [2, 146, 116],
                    [3, 58, 36, 2, 59, 37],
                    [4, 36, 16, 4, 37, 17],
                    [4, 36, 12, 4, 37, 13],
                    [2, 86, 68, 2, 87, 69],
                    [4, 69, 43, 1, 70, 44],
                    [6, 43, 19, 2, 44, 20],
                    [6, 43, 15, 2, 44, 16],
                    [4, 101, 81],
                    [1, 80, 50, 4, 81, 51],
                    [4, 50, 22, 4, 51, 23],
                    [3, 36, 12, 8, 37, 13],
                    [2, 116, 92, 2, 117, 93],
                    [6, 58, 36, 2, 59, 37],
                    [4, 46, 20, 6, 47, 21],
                    [7, 42, 14, 4, 43, 15],
                    [4, 136, 108],
                    [8, 68, 42],
                    [5, 43, 19, 1, 44, 20],
                    [1, 50, 16, 12, 51, 17],
                    [2, 152, 122],
                    [3, 76, 48, 4, 77, 49],
                    [4, 54, 24, 7, 55, 25],
                    [12, 45, 15, 4, 46, 16],
                    [2, 172, 138],
                    [10, 86, 54],
                    [6, 54, 24, 6, 55, 25],
                    [4, 54, 16, 14, 55, 17],
                    [4, 196, 156],
                    [1, 98, 62, 6, 99, 63],
                    [8, 58, 26, 4, 59, 27],
                    [12, 45, 15, 8, 46, 16],
                    [2, 224, 178],
                    [4, 112, 70, 4, 113, 71],
                    [3, 55, 21, 10, 56, 22],
                    [3, 45, 15, 16, 46, 16],
                    [4, 252, 202],
                    [4, 126, 80, 4, 127, 81],
                    [17, 58, 22],
                    [6, 45, 15, 16, 46, 16],
                    [6, 280, 224],
                    [6, 140, 88, 2, 141, 89],
                    [17, 53, 21],
                    [4, 45, 15, 23, 46, 16],
                    [4, 308, 246],
                    [13, 123, 77],
                    [4, 58, 22, 13, 59, 23],
                    [17, 45, 15, 3, 46, 16],
                    [5, 336, 268],
                    [4, 168, 106, 4, 169, 107],
                    [1, 62, 24, 20, 63, 25],
                    [19, 47, 15, 6, 48, 16],
                    [6, 364, 290],
                    [6, 145, 91, 4, 146, 92],
                    [1, 62, 24, 22, 63, 25],
                    [2, 45, 15, 26, 46, 16],
                    [8, 420, 336],
                    [8, 168, 106, 4, 169, 107],
                    [20, 62, 24, 4, 63, 25],
                    [20, 47, 15, 7, 48, 16],
                    [8, 448, 358],
                    [10, 156, 98, 4, 157, 99],
                    [19, 60, 24, 6, 61, 25],
                    [16, 45, 15, 14, 46, 16],
                    [10, 504, 402],
                    [12, 168, 106, 4, 169, 107],
                    [8, 56, 22, 16, 57, 23],
                    [29, 45, 15, 3, 46, 16],
                    [12, 560, 448],
                    [12, 186, 116, 4, 187, 117],
                    [12, 55, 21, 16, 56, 22],
                    [29, 45, 15, 6, 46, 16],
                    [14, 616, 492],
                    [12, 205, 129, 4, 206, 130],
                    [13, 58, 22, 16, 59, 23],
                    [29, 46, 16, 6, 47, 17],
                    [16, 672, 536],
                    [17, 224, 140],
                    [13, 58, 22, 18, 59, 23],
                    [2, 45, 15, 34, 46, 16],
                    [18, 728, 582],
                    [14, 242, 152, 4, 243, 153],
                    [2, 62, 24, 32, 63, 25],
                    [20, 47, 15, 18, 48, 16],
                    [20, 784, 626],
                    [18, 261, 163, 4, 262, 164],
                    [4, 62, 24, 31, 63, 25],
                    [11, 46, 16, 31, 47, 17],
                    [24, 868, 694],
                    [16, 290, 180, 2, 291, 181],
                    [19, 62, 24, 19, 63, 25],
                    [11, 46, 16, 34, 47, 17],
                    [26, 924, 740],
                    [30, 308, 192],
                    [3, 62, 24, 35, 63, 25],
                    [11, 46, 16, 37, 47, 17],
                    [30, 1008, 806],
                    [8, 336, 210, 4, 337, 211],
                    [3, 62, 24, 40, 63, 25],
                    [5, 47, 17, 43, 48, 18],
                    [32, 1092, 874],
                    [8, 364, 228, 4, 365, 229],
                    [42, 62, 24, 1, 63, 25],
                    [23, 47, 17, 26, 48, 18],
                    [36, 1176, 940],
                    [10, 392, 244, 4, 393, 245],
                    [4, 62, 24, 46, 63, 25],
                    [29, 47, 17, 23, 48, 18],
                    [40, 1260, 1008],
                    [6, 420, 262, 4, 421, 263],
                    [43, 62, 24, 1, 63, 25],
                    [29, 47, 17, 28, 48, 18],
                    [44, 1344, 1074],
                    [8, 448, 280, 4, 449, 281],
                    [22, 62, 24, 28, 63, 25],
                    [8, 47, 17, 49, 48, 18],
                    [48, 1428, 1142],
                    [10, 476, 298, 4, 477, 299],
                    [26, 62, 24, 28, 63, 25],
                    [6, 47, 17, 53, 48, 18],
                    [52, 1512, 1210],
                    [12, 504, 316, 4, 505, 317],
                    [26, 62, 24, 32, 63, 25],
                    [12, 47, 17, 51, 48, 18],
                    [58, 1624, 1298],
                    [18, 541, 338, 4, 542, 339],
                    [32, 62, 24, 32, 63, 25],
                    [14, 47, 17, 56, 48, 18],
                    [60, 1710, 1368],
                    [18, 570, 356, 5, 571, 357],
                    [34, 62, 24, 34, 63, 25],
                    [14, 47, 17, 58, 48, 18]
                ],
                e = {};
            return e.getRSBlocks = function (e, n) {
                var o = function (e, n) {
                    switch (n) {
                        case r.L:
                            return t[4 * (e - 1) + 0];
                        case r.M:
                            return t[4 * (e - 1) + 1];
                        case r.Q:
                            return t[4 * (e - 1) + 2];
                        case r.H:
                            return t[4 * (e - 1) + 3];
                        default:
                            return
                    }
                }(e, n);
                if (void 0 == o) throw new Error("bad rs block @ typeNumber:" + e + "/errorCorrectLevel:" + n);
                for (var i = o.length / 3, a = [], s = 0; s < i; s++)
                    for (var l = o[3 * s + 0], u = o[3 * s + 1], c = o[3 * s + 2], h = 0; h < l; h++) a.push(new function (t, e) {
                        this.totalCount = t, this.dataCount = e
                    }(u, c));
                return a
            }, e
        }(),
        d = function () {
            this._buffer = [], this._length = 0
        };
        d.prototype.getBuffer = function () {
            return this._buffer
        }, d.prototype.get = function (t) {
            var e = Math.floor(t / 8);
            return 1 == (this._buffer[e] >>> 7 - t % 8 & 1)
        }, d.prototype.put = function (t, e) {
            for (var r = 0; r < e; r++) this.putBit(1 == (t >>> e - r - 1 & 1))
        }, d.prototype.getLengthInBits = function () {
            return this._length
        }, d.prototype.putBit = function (t) {
            var e = Math.floor(this._length / 8);
            this._buffer.length <= e && this._buffer.push(0), t && (this._buffer[e] |= 128 >>> this._length % 8), this._length++
        };
        var g = t;
        return g.CorrectLevel = r, g
    }();
    "object" == typeof exports ? exports.QRCode = qrcode : "function" == typeof define && define.amd ? define([], function () {
        return qrcode
    }) : window.QRCode = qrcode
})();
